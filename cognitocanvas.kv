# cognitocanvas.kv
# Kivy language file defining the visual layout and structure of the Cognito Canvas UI.
# Links UI elements like the canvas and buttons to the corresponding Python logic in main.py.

#:kivy 2.1.0  # Specify the Kivy version being used

#:import Window kivy.core.window.Window
#:import Factory kivy.factory.Factory

#-------------------------------------------------------------------------------
# Custom Widget Definitions (Implementations are in main.py)
#-------------------------------------------------------------------------------

<InteractiveCanvas@Widget>:
    # This widget is defined in main.py and handles drawing logic.
    # The canvas instructions below provide a basic background.
    # Drawing lines/shapes will be added dynamically via the Python class.
    canvas.before:
        Color:
            rgba: 0.95, 0.95, 0.95, 1 # Light gray background for the canvas
        Rectangle:
            pos: self.pos
            size: self.size

#-------------------------------------------------------------------------------
# Main Application Layout
#-------------------------------------------------------------------------------

<MainLayout>:
    # Root widget, using BoxLayout for vertical arrangement.
    orientation: 'vertical'
    padding: '5dp' # Padding around the entire layout
    spacing: '5dp' # Spacing between child widgets (Canvas and Button Bar)

    # Reference to the InteractiveCanvas instance for access in Python logic
    canvas_widget: canvas_area

    # The main drawing area
    InteractiveCanvas:
        id: canvas_area
        # Takes up most of the vertical space, leaving room for buttons
        size_hint_y: 0.85

    # Horizontal container for control buttons at the bottom
    BoxLayout:
        orientation: 'horizontal'
        # Takes up the remaining vertical space
        size_hint_y: 0.15
        padding: '5dp' # Padding within the button bar
        spacing: '10dp' # Spacing between buttons

        # Button to trigger mathematical expression solving
        Button:
            text: 'Solve Math'
            font_size: '16sp' # Slightly smaller font for potentially smaller screens
            # Calls the solve_math method defined in the MainLayout class (main.py)
            on_press: root.solve_math()
            # Basic visual styling
            background_color: 0.2, 0.6, 0.8, 1 # Blueish color
            color: 1, 1, 1, 1 # White text

        # Button to trigger flowchart-to-code generation
        Button:
            text: 'Generate Code'
            font_size: '16sp'
            # Calls the generate_code method defined in the MainLayout class (main.py)
            on_press: root.generate_code()
            background_color: 0.3, 0.7, 0.4, 1 # Greenish color
            color: 1, 1, 1, 1

        # Button to trigger note summarization
        Button:
            text: 'Summarize'
            font_size: '16sp'
            # Calls the summarize_notes method defined in the MainLayout class (main.py)
            on_press: root.summarize_notes()
            background_color: 0.9, 0.7, 0.1, 1 # Yellowish color
            color: 0, 0, 0, 1 # Black text for better contrast

        # Button to clear the canvas
        Button:
            text: 'Clear'
            font_size: '16sp'
            # Calls the clear_canvas method defined in the MainLayout class (main.py)
            on_press: root.clear_canvas()
            background_color: 0.9, 0.3, 0.3, 1 # Reddish color for destructive action
            color: 1, 1, 1, 1

#-------------------------------------------------------------------------------
# Popup Definitions (Optional - for displaying results/errors)
# These are templates; they are instantiated and populated in main.py
#-------------------------------------------------------------------------------

<ResultPopup@Popup>:
    # A popup to display results (e.g., math solutions, summaries)
    title: 'Result'
    title_size: '20sp'
    title_align: 'center'
    separator_color: 0.2, 0.6, 0.8, 1 # Match Solve Math button color
    content: ScrollView: # Use ScrollView for potentially long results
        size_hint: 1, 1
        do_scroll_x: False # Disable horizontal scrolling
        Label:
            id: result_label # ID to access the label content from Python
            text: root.result_text # Bind to a property in the Popup instance
            font_size: '16sp'
            size_hint_y: None # Allow label to grow vertically
            height: self.texture_size[1] # Set height based on text content
            text_size: self.width - dp(20), None # Enable text wrapping
            padding: '10dp', '10dp'
            halign: 'left'
            valign: 'top'
            markup: True # Allow basic text markup if needed
    size_hint: 0.9, 0.6 # Popup takes 90% width, 60% height of the window
    auto_dismiss: True # Dismiss when clicking outside

<ErrorPopup@Popup>:
    # A popup to display error messages
    title: 'Error'
    title_size: '20sp'
    title_align: 'center'
    separator_color: 0.9, 0.3, 0.3, 1 # Match Clear button color
    content: Label:
        id: error_label
        text: root.error_message # Bind to a property in the Popup instance
        font_size: '16sp'
        color: 1, 0.2, 0.2, 1 # Reddish text for error
        text_size: self.width - dp(20), None # Enable text wrapping
        size_hint_y: None
        height: self.texture_size[1]
        padding: '10dp', '10dp'
        halign: 'center'
        valign: 'middle'
    size_hint: 0.8, 0.4 # Slightly smaller popup for errors
    auto_dismiss: True